// Username dropdown functionality
function toggleDropdown() {
    document.getElementById("usernameDropdown").classList.toggle("show");
}

// Custom dropdown functionality
function toggleCustomDropdown(element) {
    element.classList.toggle('active');
    
    var dropdownList = element.nextElementSibling;
    
    var allDropdowns = document.querySelectorAll('.dropdown-list');
    allDropdowns.forEach(function(dropdown) {
        if (dropdown !== dropdownList && dropdown.classList.contains('show')) {
            dropdown.classList.remove('show');
            dropdown.previousElementSibling.classList.remove('active');
        }
    });
    
    if (!dropdownList.classList.contains('show')) {
        dropdownList.classList.add('show');
    } else {
        dropdownList.classList.remove('show');
    }
}

function selectOption(option) {
    var selectedText = option.textContent;
    var dropdownList = option.parentElement;
    var dropdownSelect = dropdownList.previousElementSibling;
    
    dropdownSelect.textContent = selectedText;
    
    var options = dropdownList.querySelectorAll('.dropdown-option');
    options.forEach(function(opt) {
        opt.classList.remove('selected');
    });
    
    option.classList.add('selected');
    
    setTimeout(function() {
        dropdownList.classList.remove('show');
        dropdownSelect.classList.remove('active');
    }, 150);
    
    loadRooms();
}

// Close the dropdowns if the user clicks outside
window.onclick = function(event) {
    if (!event.target.matches('.username-dropdown') && !event.target.matches('.username-dropdown span')) {
        var dropdown = document.getElementById("usernameDropdown");
        if (dropdown && dropdown.classList.contains('show')) {
            dropdown.classList.remove('show');
        }
    }
    
    if (!event.target.matches('.dropdown-select') && !event.target.matches('.dropdown-option')) {
        var dropdowns = document.querySelectorAll('.dropdown-list');
        var selects = document.querySelectorAll('.dropdown-select');
        
        dropdowns.forEach(function(dropdown) {
            if (dropdown.classList.contains('show')) {
                dropdown.classList.remove('show');
            }
        });
        
        selects.forEach(function(select) {
            if (select.classList.contains('active')) {
                select.classList.remove('active');
            }
        });
    }
}

// Load rooms from API
function loadRooms() {
    const floorsContainer = document.getElementById("floors-container");
    floorsContainer.innerHTML = "<div class='loading-indicator'>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>";
    
    const dormitoryText = document.querySelector('.dropdown-container:nth-child(1) .dropdown-select').textContent;
    let dormitoryId = null;
    
    if (dormitoryText.includes('‡∏ï‡∏∂‡∏Å A')) {
        dormitoryId = "D001";
    } else if (dormitoryText.includes('‡∏ï‡∏∂‡∏Å B')) {
        dormitoryId = "D002";
    } else if (dormitoryText.includes('‡∏ï‡∏∂‡∏Å C')) {
        dormitoryId = "D003";
    }
    
    const floorText = document.querySelector('.dropdown-container:nth-child(2) .dropdown-select').textContent;
    let floor = "";
    
    if (floorText.includes('‡∏ä‡∏±‡πâ‡∏ô 1')) {
        floor = "1";
    } else if (floorText.includes('‡∏ä‡∏±‡πâ‡∏ô 2')) {
        floor = "2";
    } else if (floorText.includes('‡∏ä‡∏±‡πâ‡∏ô 3')) {
        floor = "3";
    }

    const roomSearch = document.getElementById("roomSearch").value.trim();

    let apiUrl = `/api/rooms?`;
    
    if (dormitoryId) {
        apiUrl += `dormitory_id=${dormitoryId}&`;
    }
    
    if (floor) {
        apiUrl += `floor=${floor}&`;
    }
    if (roomSearch) {
        apiUrl += `room_id=${roomSearch}&`;
    }
    
    if (apiUrl.endsWith('&')) {
        apiUrl = apiUrl.slice(0, -1);
    }

    console.log("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á:", apiUrl);

    axios.get(apiUrl)
        .then(response => {
            const rooms = response.data;
            
            if (dormitoryText === "‡∏ó‡∏∏‡∏Å‡∏ï‡∏∂‡∏Å") {
                displayRoomsByDormitory(rooms);
            } else {
                displayRooms(rooms);
            }
        })
        .catch(error => {
            console.error("‚ùå Error loading rooms:", error);
            floorsContainer.innerHTML = "<div class='error-message'>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</div>";
        });
}

// Display rooms in HTML
function displayRooms(roomsData) {
    const floorsContainer = document.getElementById("floors-container");
    floorsContainer.innerHTML = "";

    if (!roomsData || Object.keys(roomsData).length === 0) {
        floorsContainer.innerHTML = "<div class='no-results'>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</div>";
        return;
    }

    const sortedFloors = Object.keys(roomsData).sort((a, b) => parseInt(a) - parseInt(b));

    sortedFloors.forEach(floor => {
        const floorSection = document.createElement("div");
        floorSection.classList.add("floor-section");
        floorSection.innerHTML = `
            <div class="floor-title">‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà ${floor}</div>
            <div class="room-grid"></div>
        `;

        const roomGrid = floorSection.querySelector(".room-grid");
        const rooms = roomsData[floor];

        rooms.sort((a, b) => a.room_id.localeCompare(b.room_id));

        rooms.forEach(room => {
            const roomButton = document.createElement("button");
            roomButton.classList.add("room-item");
            roomButton.classList.add(room.tenant_ID ? "occupied" : "available");

            roomButton.innerHTML = `
                <div class="room-status">
                    <img src="${room.tenant_picture || '/image/default-profile.png'}" alt="User" class="room-user-image"
                         onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
                    <div class="room-status-icon"></div>
                </div>
                <h3>${room.room_id}</h3>
            `;

            roomButton.onclick = () => openPopup(
                room.room_id,
                room.room_status,
                room.tenant_status,
                room.telephone,
                room.tenant_ID,
                room.tenant_picture,
                room.firstName,
                room.lastName,
                room.room_type_name
            );

            roomGrid.appendChild(roomButton);
        });

        floorsContainer.appendChild(floorSection);
    });
}

// Display rooms by dormitory for "‡∏ó‡∏∏‡∏Å‡∏ï‡∏∂‡∏Å" option
function displayRoomsByDormitory(roomsData) {
    const floorsContainer = document.getElementById("floors-container");
    floorsContainer.innerHTML = "";

    if (!roomsData || Object.keys(roomsData).length === 0) {
        floorsContainer.innerHTML = "<div class='no-results'>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</div>";
        return;
    }

    const dormitories = {};

    Object.keys(roomsData).forEach(floor => {
        roomsData[floor].forEach(room => {
            const dormId = room.dormitory_id;
            const dormName = getDormitoryName(dormId);

            if (!dormitories[dormName]) {
                dormitories[dormName] = {};
            }

            if (!dormitories[dormName][floor]) {
                dormitories[dormName][floor] = [];
            }

            dormitories[dormName][floor].push(room);
        });
    });

    Object.keys(dormitories).sort().forEach(dormName => {
        const dormitorySection = document.createElement("div");
        dormitorySection.classList.add("dormitory-section");
        dormitorySection.innerHTML = `<h2 class="dormitory-title">${dormName}</h2>`;

        const floors = Object.keys(dormitories[dormName]).sort((a, b) => parseInt(a) - parseInt(b));

        floors.forEach(floor => {
            const floorSection = document.createElement("div");
            floorSection.classList.add("floor-section");
            floorSection.innerHTML = `
                <div class="floor-title">‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà ${floor}</div>
                <div class="room-grid"></div>
            `;

            const roomGrid = floorSection.querySelector(".room-grid");
            const rooms = dormitories[dormName][floor];

            rooms.sort((a, b) => a.room_id.localeCompare(b.room_id));

            rooms.forEach(room => {
                const roomButton = document.createElement("button");
                roomButton.classList.add("room-item");
                roomButton.classList.add(room.tenant_ID ? "occupied" : "available");

                roomButton.innerHTML = `
                    <div class="room-status">
                        <img src="${room.tenant_picture || '/image/default-profile.png'}" alt="User" class="room-user-image"
                             onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
                        <div class="room-status-icon"></div>
                    </div>
                    <h3>${room.room_id}</h3>
                `;

                roomButton.onclick = () => openPopup(
                    room.room_id,
                    room.room_status || (room.tenant_ID ? "‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤" : "‡∏ß‡πà‡∏≤‡∏á"),
                    room.tenant_status || (room.tenant_ID ? "‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏≠‡∏¢‡∏π‡πà" : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤"),
                    room.telephone || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                    room.tenant_ID || null,
                    room.tenant_picture || '/image/default-profile.png',
                    room.firstName || '',
                    room.lastName || '',
                    room.room_type_name
                );

                roomGrid.appendChild(roomButton);
            });

            dormitorySection.appendChild(floorSection);
        });

        floorsContainer.appendChild(dormitorySection);
    });
}

// Convert dormitory ID to name
function getDormitoryName(dormId) {
    switch (dormId) {
        case 'D001': return '‡∏ï‡∏∂‡∏Å A';
        case 'D002': return '‡∏ï‡∏∂‡∏Å B';
        case 'D003': return '‡∏ï‡∏∂‡∏Å C';
        default: return `‡∏ï‡∏∂‡∏Å ${dormId}`;
    }
}

// Open popup to show room details
function openPopup(roomId, roomStatus, tenantStatus, telephone, tenantId, tenantPicture, firstName, lastName, roomTypeName) {
    const popup = document.getElementById("profilePopup");
    const popupRoomNumber = document.getElementById("popup-room-number");
    const popupTenantName = document.getElementById("popup-tenant-name");
    const popupRoomStatus = document.getElementById("popup-room-status");
    // const popupTenantStatus = document.getElementById("popup-tenant-status");
    const popupPhone = document.getElementById("popup-phone");
    const popupRoomType = document.getElementById("popup-room-type");

    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ popupRoomType ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á
    if (!popupRoomType) {
        const popupBody = popup.querySelector(".popup-body .profile-info");
        const roomTypeElement = document.createElement("p");
        roomTypeElement.id = "popup-room-type";
        roomTypeElement.innerHTML = `<strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡πâ‡∏≠‡∏á:</strong> <span></span>`;
        popupBody.appendChild(roomTypeElement);
    }

    popupRoomNumber.textContent = roomId;
    popupTenantName.textContent = `${firstName || ''} ${lastName || ''}`;
    popupRoomStatus.textContent = roomStatus || (tenantId ? "‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤" : "‡∏ß‡πà‡∏≤‡∏á");
    // popupTenantStatus.textContent = tenantStatus || (tenantId ? "‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏≠‡∏¢‡∏π‡πà" : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤");
    popupPhone.textContent = telephone || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
    document.getElementById("popup-room-type").querySelector("span").textContent = roomTypeName || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";

    const deleteTenantBtn = document.getElementById("delete-tenant-btn");
    const hasTenant = tenantId && tenantId !== "null" && tenantId.trim() !== "";

    if (hasTenant) {
        console.log("‚úÖ ‡∏´‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤");
        deleteTenantBtn.innerText = "‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤";
        deleteTenantBtn.classList.add("btn-danger");
        deleteTenantBtn.classList.remove("btn-disabled");
        deleteTenantBtn.onclick = function () {
            confirmRemoveTenant(roomId, tenantId);
        };
    } else {
        console.log("‚ùå ‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤");
        deleteTenantBtn.innerText = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤";
        deleteTenantBtn.classList.add("btn-disabled");
        deleteTenantBtn.classList.remove("btn-danger");
        deleteTenantBtn.onclick = function () {
            alert("‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤");
        };
    }

    popup.style.display = "flex"; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å "block" ‡πÄ‡∏õ‡πá‡∏ô "flex"
    setTimeout(() => {
        popup.classList.add("show");
    }, 10);
}

// Confirm and remove tenant
function confirmRemoveTenant(roomNumber, tenantID) {
    console.log("Remove tenant debug:", { roomNumber, tenantID });
    
    if (confirm(`‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á ${roomNumber} ?`)) {
        axios.post('/api/remove-tenant', { 
            room_id: roomNumber,
            tenant_ID: tenantID 
        })
        .then(response => {
            alert(response.data.message);
            closePopup();
            loadRooms(); // Reload rooms after removal
        })
        .catch(error => {
            console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
            alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤");
        });
    }
}

// Close popup
function closePopup() {
    var popupContainer = document.getElementById("profilePopup");
    popupContainer.classList.remove("show");
    popupContainer.classList.add("hide");

    setTimeout(() => {
        popupContainer.style.display = "none";
        popupContainer.classList.remove("hide");
    }, 300);
}

// Delete tenant (alternative function)
// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤
function deleteTenant(tenantId, roomId) {
    if (confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ? ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏•‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏´‡πâ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢")) {
        axios.delete(`/api/tenant/${tenantId}`, { data: { roomId } }) // ‡∏™‡πà‡∏á roomId ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
            .then(response => {
                if (response.data.success) {
                    alert("‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
                    // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏à‡∏≤‡∏Å DOM
                    const row = document.querySelector(`tr[data-tenant-id="${tenantId}"]`);
                    if (row) row.remove();
                    loadTenantStatus(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ)
                }
            })
            .catch(error => {
                console.error("‚ùå Error deleting tenant:", error.response.data);
                alert(error.response.data.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤");
            });
    }
}

function loadTenantStatus() {
    axios.get('/api/tenant-status')
        .then(response => {
            const tenantStatusTable = document.getElementById("tenantStatusTable");
            tenantStatusTable.innerHTML = ""; // ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô
            response.data.forEach(tenant => {
                const row = document.createElement("tr");
                row.setAttribute("data-tenant-id", tenant.tenant_ID);
                row.innerHTML = `
                    <td>${tenant.tenant_ID}</td>
                    <td>${tenant.firstName}</td>
                    <td>${tenant.lastName}</td>
                    <td>${tenant.room_id}</td>
                    <td>${tenant.room_status}</td>
                    <td><button onclick="deleteTenant('${tenant.tenant_ID}', '${tenant.room_id}')">‡∏•‡∏ö</button></td>
                `;
                tenantStatusTable.appendChild(row);
            });
        })
        .catch(error => console.error("‚ùå Error fetching tenant status:", error));
}

// Handle room status change
function handleRoomStatusChange() {
    const roomStatusDropdown = document.getElementById("roomStatus");
    const selectedStatus = roomStatusDropdown.value;
    const roomId = document.getElementById("popup-room-number").innerText; 

    if (selectedStatus === "‡∏ß‡πà‡∏≤‡∏á") {
        if (confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡πà‡∏≤‡∏á? ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å!")) {
            axios.post('/api/update-room-status', {
                room_id: roomId,
                tenant_ID: null
            })
            .then(response => {
                alert("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!");
                loadRooms();
                closePopup();
            })
            .catch(error => {
                console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:", error);
                alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
            });
        } else {
            roomStatusDropdown.value = "‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤";
        }
    }
}

// View contract details
function viewContract() {
    const roomNumber = document.getElementById("popup-room-number").innerText;
    window.location.href = `/ContractDetail?room_id=${roomNumber}`;
}

// Event listener when DOM is loaded
document.addEventListener("DOMContentLoaded", function() {
    const roomSearch = document.getElementById("roomSearch");
    if (roomSearch) {
        roomSearch.addEventListener("input", function() {
            clearTimeout(this.searchTimeout);
            this.searchTimeout = setTimeout(() => {
                loadRooms();
            }, 300);
        });
    }
    
    loadRooms(); // Load initial rooms

    // CSS for loading indicator, error message, and no results
    const style = document.createElement('style');
    style.textContent = `
        .loading-indicator, .error-message, .no-results {
            text-align: center;
            padding: 20px;
            margin: 20px 0;
            font-size: 16px;
        }
        .loading-indicator {
            color: #0066cc;
        }
        .error-message {
            color: #cc0000;
        }
        .no-results {
            color: #666;
            font-style: italic;
        }
    `;
    document.head.appendChild(style);
});